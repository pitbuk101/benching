"""Module for ideas and QnA responses for SourceAi entities"""

import json

from langgraph.graph import END, StateGraph
from langgraph.graph.state import CompiledStateGraph

from ada.components.db.pg_connector import PGConnector
from ada.use_cases.idea_generation.dynamic_ideas.dynamic_ideas_graph import (
    DynamicIdeasGraphState,
    analytics_data_retriever,
    call_ner_sub_graph,
    call_response_generator_graph,
    data_sink,
    decide_retrieval_nodes,
    dynamic_quest_classifier,
    get_all_analytics_data_retriever,
    idea_data_retriever,
    sku_data_retriever,
    supplier_data_retriever,
)
from ada.use_cases.idea_generation.dynamic_ideas.parsers import RequestPayload
from ada.use_cases.idea_generation.exception import DynamicQnAException
from ada.utils.logs.logger import get_logger
from ada.utils.logs.time_logger import log_time

log = get_logger("dynamic_ideas")


def create_langgraph() -> CompiledStateGraph:
    """
    Creates and compiles the dynamic ideas graph workflow.

    This function sets up the workflow for processing dynamic ideas and QnA responses.
    It defines the nodes and edges of the workflow, specifying the sequence of operations
    to be performed on the input data.

    Returns:
        CompiledStateGraph: The compiled workflow for dynamic ideas processing.
    """
    workflow = StateGraph(DynamicIdeasGraphState)

    # Create nodes
    workflow.add_node("call_ner_sub_graph", call_ner_sub_graph)
    workflow.add_node("dynamic_quest_classifier", dynamic_quest_classifier)
    workflow.add_node("supplier_data_retriever", supplier_data_retriever)
    workflow.add_node("sku_data_retriever", sku_data_retriever)
    workflow.add_node("analytics_data_retriever", analytics_data_retriever)
    workflow.add_node("get_all_analytics_data_retriever", get_all_analytics_data_retriever)
    workflow.add_node("idea_data_retriever", idea_data_retriever)
    workflow.add_node("data_sink", data_sink)
    workflow.add_node("call_response_generator_graph", call_response_generator_graph)

    # Connect nodes
    workflow.set_entry_point("dynamic_quest_classifier")
    workflow.set_entry_point("call_ner_sub_graph")

    workflow.add_conditional_edges(
        "call_ner_sub_graph",
        decide_retrieval_nodes,
        {
            "supplier_data_retriever": "supplier_data_retriever",
            "sku_data_retriever": "sku_data_retriever",
            "analytics_data_retriever": "analytics_data_retriever",
            "idea_data_retriever": "idea_data_retriever",
            "get_all_analytics_data_retriever": "get_all_analytics_data_retriever",
        },
    )

    workflow.add_edge("supplier_data_retriever", "data_sink")
    workflow.add_edge("sku_data_retriever", "data_sink")
    workflow.add_edge("analytics_data_retriever", "data_sink")
    workflow.add_edge("idea_data_retriever", "data_sink")
    workflow.add_edge("get_all_analytics_data_retriever", "data_sink")
    workflow.add_edge(["data_sink", "dynamic_quest_classifier"], "call_response_generator_graph")
    workflow.add_edge("call_response_generator_graph", END)

    return workflow.compile()


@log_time
def run_dynamic_ideas_graph(
    json_str: str,
    chat_history: list,
    pg_db_conn: PGConnector,
):
    """
    Runs the dynamic ideas graph workflow.
    Args:
        json_str (str): JSON string containing the input data.
        chat_history (list): List of chat history entries.
        pg_db_conn(PGConnector): Instantiated PGConnector object
    Returns:
        dict[str, Any]: The response payload generated by the workflow.
    """
    try:
        dyn_ideas_request_payload = RequestPayload(**json.loads(json_str))

        dyn_ideas_graph = create_langgraph()
        state = dyn_ideas_graph.invoke(
            {
                "chat_history": chat_history,
                "pg_db_conn": pg_db_conn,
                **dyn_ideas_request_payload.model_dump(),
            },
        )
        return state["response_payload"]
    except ValueError as ex:
        raise DynamicQnAException(ex) from ex
    except DynamicQnAException as ex:
        raise ex
